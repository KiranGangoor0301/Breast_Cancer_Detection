# -*- coding: utf-8 -*-
"""Cancer Detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1yKeNJRRaIiJzXoluzcbzb1aegK08aSYz
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import scipy
import sklearn
import tensorflow as tf

from sklearn.datasets import load_breast_cancer
bc=load_breast_cancer()

bc.keys()

print(bc.DESCR)

df=pd.DataFrame(bc.data,columns=bc.feature_names)

df

df.shape

df.info()

df.describe()

df.isnull()

df.isnull().sum()

data=df.iloc[:,0:10]

data

sns.pairplot(data,diag_kind='kde')

X=data.iloc[:,:9]

y=data.iloc[:,-1]

y

y.head()

sns.distplot(y)

print("Skewness {}".format(y.skew()))
print("Kurtosis {}".format(y.kurt()))

from scipy.stats import norm ,skew
from scipy import stats

sns.distplot(y,fit=norm)
(mu,sigma)=norm.fit(y)
print("mu : {} and sigma : {}".format(mu,sigma))
plt.legend(["Normal Distance=(mu:{} sigma:{})".format(round(mu,2),round(sigma,2))],loc='best')

sns.distplot(y,fit=norm)
(mu,sigma)=norm.fit(y)
print("mu : {} and sigma : {}".format(mu,sigma))
plt.legend(["Normal Distance=(mu:{} sigma:{})".format(round(mu,2),round(sigma,2))],loc='best')

fig=plt.figure()
res=stats.probplot(y,plot=plt)
plt.show()

sns.distplot(y,fit=norm)
y=np.log1p(y)
(mu,sigma)=norm.fit(y)
print("mu : {} and sigma : {}".format(mu,sigma))
plt.legend(["Normal Distance=(mu:{} sigma:{})".format(round(mu,2),round(sigma,2))],loc='best')
print("Skewness {}".format(y.skew()))
print("Kurtosis {}".format(y.kurt()))

fig = plt.figure()
res = stats.probplot(y, plot=plt)
plt.show()

plt.figure(figsize=(10,10))
cor=data.corr()
sns.heatmap(cor,annot=True,cmap=plt.cm.PuBu )
plt.show()

cor_target = data.corrwith(y)  # Calculate the correlation of each feature with the target variable
relevant_features = cor_target[abs(cor_target) > 0.2]  # Select features with absolute correlation > 0.4
names = relevant_features.index.tolist()  # Get the names of relevant features
names.remove(data['mean fractal dimension'])
print(names)
print(len(names))

from sklearn.model_selection import train_test_split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.7)

print(X_train.shape)
print(X_test.shape)
print(y_train.shape)
print(X_test.shape)

from sklearn.linear_model import LinearRegression

lr=LinearRegression()

lr.fit(X_train,y_train)

prediction=lr.predict(X_test)
print("Actual Value is : {}".format(y_test[0]))
print("Prediction Value is : {}".format(prediction[0]))

from sklearn.metrics import mean_squared_error
mse=mean_squared_error(y_test,prediction)
print(mse)

